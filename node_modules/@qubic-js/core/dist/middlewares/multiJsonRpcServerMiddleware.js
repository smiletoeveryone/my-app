"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMultiInfuraMiddleware = void 0;
const eth_json_rpc_infura_1 = __importDefault(require("@qubic-js/eth-json-rpc-infura"));
const backend_1 = require("../constants/backend");
const types_1 = require("../types");
const bridge_1 = require("../types/bridge");
const utils_1 = require("../utils");
// infura doesn't support bsc, so we use json rpc server here
const BSC_RPC_URL = 'https://bsc-dataseed1.binance.org';
const BSC_TESTNET_RPC_URL = 'https://data-seed-prebsc-1-s1.binance.org:8545';
exports.createMultiInfuraMiddleware = (options, bridge) => {
    let currentNetwork = options.initNetwork;
    const infuraMiddlewares = new Map();
    function getCurrentMiddleware() {
        const currentMiddleware = infuraMiddlewares.get(currentNetwork) ||
            ([types_1.Network.BSC, types_1.Network.BSC_TESTNET].includes(currentNetwork)
                ? utils_1.createJsonRpcServerMiddleware({
                    url: currentNetwork === types_1.Network.BSC ? BSC_RPC_URL : BSC_TESTNET_RPC_URL,
                })
                : eth_json_rpc_infura_1.default({
                    network: backend_1.INFURA_NETWORK_ENDPOINTS[currentNetwork],
                    projectId: options.projectId,
                }));
        infuraMiddlewares.set(currentNetwork, currentMiddleware);
        return currentMiddleware;
    }
    bridge.on(bridge_1.BridgeEvent.chainChanged, chainId => {
        currentNetwork = Number(chainId);
    });
    return (req, res, next, end) => {
        getCurrentMiddleware()(req, res, next, end);
    };
};
