"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWalletMiddleware = exports.KEEP_HIDE_WALLET_HANDLE_METHODS = exports.WALLET_HANDLE_METHODS = void 0;
const eth_rpc_errors_1 = require("eth-rpc-errors");
const json_rpc_engine_1 = require("json-rpc-engine");
exports.WALLET_HANDLE_METHODS = [
    'qubic_login',
    'qubic_skipPreviewSign',
    'qubic_skipPreviewSignTypedData',
    'qubic_issueIdentityTicket',
    'eth_chainId',
    'eth_accounts',
    'eth_requestAccounts',
    'wallet_addEthereumChain',
    'wallet_switchEthereumChain',
    'personal_sign',
    'eth_sign',
    'eth_signTypedData',
    'eth_signTypedData_v3',
    'eth_signTypedData_v4',
    'eth_signTransaction',
    'eth_sendTransaction',
];
exports.KEEP_HIDE_WALLET_HANDLE_METHODS = ['qubic_issueIdentityTicket'];
exports.createWalletMiddleware = (send) => json_rpc_engine_1.createAsyncMiddleware((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    if (exports.WALLET_HANDLE_METHODS.includes(req.method)) {
        try {
            res.result = yield send(req);
        }
        catch (error) {
            if (error instanceof Error) {
                res.error = error;
            }
            else {
                res.error = eth_rpc_errors_1.ethErrors.rpc.internal('Unsupported error');
            }
        }
    }
    else {
        next();
    }
}));
