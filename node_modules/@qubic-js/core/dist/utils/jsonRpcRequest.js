"use strict";
// from metamask mobile
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonRpcRequest = void 0;
// import URL from 'url-parse';
// eslint-disable-next-line import/no-nodejs-modules
const buffer_1 = require("buffer");
/**
 * Makes a JSON RPC request to the given URL, with the given RPC method and params.
 *
 * @param {string} rpcUrl - The RPC endpoint URL to target.
 * @param {string} rpcMethod - The RPC method to request.
 * @param {Array<unknown>} [rpcParams] - The RPC method params.
 * @returns {Promise<unknown|undefined>} Returns the result of the RPC method call,
 * or throws an error in case of failure.
 */
function jsonRpcRequest(rpcUrl, rpcMethod, rpcParams = []) {
    return __awaiter(this, void 0, void 0, function* () {
        let fetchUrl = rpcUrl;
        const headers = {
            'Content-Type': 'application/json',
        };
        // Convert basic auth URL component to Authorization header
        const { origin, pathname, username, password, search } = new URL(rpcUrl);
        // URLs containing username and password needs special processing
        if (username && password) {
            const encodedAuth = buffer_1.Buffer.from(`${username}:${password}`).toString('base64');
            headers.Authorization = `Basic ${encodedAuth}`;
            fetchUrl = `${origin}${pathname}${search}`;
        }
        const jsonRpcResponse = yield fetch(fetchUrl, {
            method: 'POST',
            body: JSON.stringify({
                id: Date.now().toString(),
                jsonrpc: '2.0',
                method: rpcMethod,
                params: rpcParams,
            }),
            headers,
            cache: 'default',
        });
        const jsonRpcResponseJson = yield jsonRpcResponse.json();
        if (!jsonRpcResponseJson || Array.isArray(jsonRpcResponseJson) || typeof jsonRpcResponseJson !== 'object') {
            throw new Error(`RPC endpoint ${rpcUrl} returned non-object response.`);
        }
        const { error, result } = jsonRpcResponseJson;
        if (error) {
            throw new Error((error === null || error === void 0 ? void 0 : error.message) || error);
        }
        return result;
    });
}
exports.jsonRpcRequest = jsonRpcRequest;
exports.default = jsonRpcRequest;
