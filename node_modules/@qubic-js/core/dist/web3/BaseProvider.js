"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseProvider = void 0;
const eth_rpc_errors_1 = require("eth-rpc-errors");
const events_1 = __importDefault(require("events"));
const json_rpc_engine_1 = require("json-rpc-engine");
const network_1 = require("../constants/network");
const multiJsonRpcServerMiddleware_1 = require("../middlewares/multiJsonRpcServerMiddleware");
const walletMiddleware_1 = require("../middlewares/walletMiddleware");
const types_1 = require("../types");
class BaseProvider extends events_1.default {
    constructor(options) {
        super();
        this.isQubic = true;
        this.sendAsync = (request, callback) => {
            if (this.engine) {
                this.engine.handle(Object.assign({ id: json_rpc_engine_1.getUniqueId(), jsonrpc: '2.0', params: [] }, request), callback);
            }
            else {
                callback(eth_rpc_errors_1.ethErrors.provider.disconnected());
            }
        };
        this.request = request => {
            return new Promise((resolve, reject) => {
                this.sendAsync(request, (error, response) => {
                    if (error) {
                        reject(error);
                        return;
                    }
                    if (!response || !BaseProvider.isJsonRpcSuccess(response)) {
                        reject(eth_rpc_errors_1.ethErrors.provider.unauthorized());
                        return;
                    }
                    resolve(response.result);
                });
            });
        };
        const { bridge, middlewares, network, infuraProjectId } = options;
        this.engine = new json_rpc_engine_1.JsonRpcEngine();
        middlewares.forEach(middleware => {
            var _a;
            (_a = this.engine) === null || _a === void 0 ? void 0 : _a.push(middleware);
        });
        this.engine.push(walletMiddleware_1.createWalletMiddleware(bridge.send.bind(bridge)));
        this.engine.push(multiJsonRpcServerMiddleware_1.createMultiInfuraMiddleware({
            initNetwork: network,
            projectId: infuraProjectId || network_1.DEFAULT_INFURA_PROJECT_ID,
        }, bridge));
        bridge.on(types_1.BridgeEvent.chainChanged, (chainId) => {
            this.emit(types_1.BridgeEvent.chainChanged, chainId);
        });
        bridge.on(types_1.BridgeEvent.accountsChanged, (accounts) => {
            this.emit(types_1.BridgeEvent.accountsChanged, accounts);
        });
    }
    static isJsonRpcSuccess(rpc) {
        return rpc.result !== undefined;
    }
}
exports.BaseProvider = BaseProvider;
exports.default = BaseProvider;
