"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const abstract_connector_1 = require("@web3-react/abstract-connector");
const core_1 = require("@qubic-js/core");
let isInitialized = false;
class QubicConnector extends abstract_connector_1.AbstractConnector {
    constructor(options) {
        super({
            supportedChainIds: [
                core_1.Network.MAINNET,
                core_1.Network.RINKEBY,
                core_1.Network.GOERLI,
                core_1.Network.POLYGON,
                core_1.Network.MUMBAI,
                core_1.Network.BSC,
                core_1.Network.BSC_TESTNET,
            ],
        });
        this.getProvider = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (this.provider) {
                return this.provider;
            }
            try {
                // we don't want next.js run browser js code in server side rendering
                // so we use dynamic import here
                const { default: DynamicImportBrowserProvider } = yield Promise.resolve().then(() => __importStar(require('@qubic-js/browser')));
                const { apiKey, apiSecret, chainId: optionChainId = core_1.Network.MAINNET, walletUrl, infuraProjectId, enableIframe, inAppHintLink, } = this.options;
                let chainId = optionChainId;
                if (!((_a = this.supportedChainIds) === null || _a === void 0 ? void 0 : _a.includes(optionChainId))) {
                    console.error(`chainId: ${optionChainId} does not supported, use mainnet instead`);
                    chainId = core_1.Network.MAINNET;
                }
                this.provider = new DynamicImportBrowserProvider({
                    apiKey,
                    apiSecret,
                    chainId,
                    walletUrl,
                    infuraProjectId,
                    enableIframe,
                    inAppHintLink,
                });
                this.setInAppHintLink = this.provider.setInAppHintLink;
                return this.provider;
            }
            catch (error) {
                if (error instanceof Error) {
                    console.error(error.message);
                }
                return null;
            }
        });
        this.activate = () => __awaiter(this, void 0, void 0, function* () {
            var _b, _c, _d;
            const { provider } = this;
            const accounts = (yield ((_b = provider === null || provider === void 0 ? void 0 : provider.request) === null || _b === void 0 ? void 0 : _b.call(provider, {
                method: 'eth_requestAccounts',
            })));
            const chainId = (yield ((_c = provider === null || provider === void 0 ? void 0 : provider.request) === null || _c === void 0 ? void 0 : _c.call(provider, {
                method: 'eth_chainId',
            })));
            provider === null || provider === void 0 ? void 0 : provider.on('chainChanged', this.handleChainChanged);
            provider === null || provider === void 0 ? void 0 : provider.on('accountsChanged', this.handleAccountsChanged);
            if ((_d = this.options) === null || _d === void 0 ? void 0 : _d.autoHideWelcome) {
                provider === null || provider === void 0 ? void 0 : provider.hide();
            }
            return { provider, chainId: Number(chainId), account: accounts[0] };
        });
        this.getChainId = () => __awaiter(this, void 0, void 0, function* () {
            var _e;
            const { provider } = this;
            const chainId = (yield ((_e = provider === null || provider === void 0 ? void 0 : provider.request) === null || _e === void 0 ? void 0 : _e.call(provider, {
                method: 'eth_chainId',
            })));
            return chainId;
        });
        // https://github.com/NoahZinsmeister/web3-react/blob/v6/packages/portis-connector/src/index.ts#L109
        // DONT'T call `this.emitDeactivate` in deactivate
        this.deactivate = () => {
            const { provider } = this;
            provider === null || provider === void 0 ? void 0 : provider.removeListener('chainChanged', this.handleChainChanged);
            provider === null || provider === void 0 ? void 0 : provider.removeListener('accountsChanged', this.handleAccountsChanged);
        };
        // https://github.com/NoahZinsmeister/web3-react/blob/v6/packages/portis-connector/src/index.ts#L126
        // call `this.emitDeactivate` in close
        this.close = () => {
            const { provider } = this;
            this.emitDeactivate();
            provider === null || provider === void 0 ? void 0 : provider.removeListener('chainChanged', this.handleChainChanged);
            provider === null || provider === void 0 ? void 0 : provider.removeListener('accountsChanged', this.handleAccountsChanged);
        };
        if (isInitialized) {
            throw Error(`You can only new QubicConnector() one time`);
        }
        isInitialized = true;
        this.options = options || {};
        this.handleChainChanged = this.handleChainChanged.bind(this);
        this.handleAccountsChanged = this.handleAccountsChanged.bind(this);
        this.setInAppHintLink = () => null;
        this.getProvider();
    }
    handleChainChanged(chainId) {
        this.emitUpdate({ chainId });
    }
    handleAccountsChanged(accounts) {
        if (accounts && accounts.length !== 0) {
            this.emitUpdate({ account: accounts[0] });
        }
    }
    getAccount() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { provider } = this;
            const accounts = (yield ((_a = provider === null || provider === void 0 ? void 0 : provider.request) === null || _a === void 0 ? void 0 : _a.call(provider, {
                method: 'eth_accounts',
            })));
            return accounts[0];
        });
    }
}
exports.default = QubicConnector;
