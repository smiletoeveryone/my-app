"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserProvider = void 0;
const core_1 = require("@qubic-js/core");
const detect_inapp_1 = __importDefault(require("@qubic-js/detect-inapp"));
const cacheMiddleware_1 = __importDefault(require("./middlewares/cacheMiddleware"));
const IFrame_1 = __importDefault(require("./middlewares/IFrame"));
const PopupWindow_1 = __importDefault(require("./middlewares/PopupWindow"));
const inAppWarningModal_1 = __importDefault(require("./ui/inAppWarningModal"));
let isInitialized = false;
class BrowserProvider extends core_1.BaseProvider {
    constructor(options) {
        const { apiKey, apiSecret, chainId = core_1.Network.MAINNET, infuraProjectId, enableIframe = false, walletUrl = core_1.WALLET_URL, inAppHintLink, } = options || {};
        const apiConfig = {
            apiKey,
            apiSecret,
            chainId,
        };
        const { hide, bridge, createPrepareBridgeMiddleware } = enableIframe
            ? new IFrame_1.default(walletUrl, apiConfig)
            : new PopupWindow_1.default(walletUrl, apiConfig);
        super({
            infuraProjectId,
            network: chainId,
            bridge,
            middlewares: [cacheMiddleware_1.default(bridge), createPrepareBridgeMiddleware()],
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const inApp = new detect_inapp_1.default(navigator.userAgent || navigator.vendor || window.opera);
        if (inApp.isInApp) {
            const { modal: inAppWarningModal, setInAppHintLink } = inAppWarningModal_1.default(inAppHintLink);
            this.setInAppHintLink = setInAppHintLink;
            document.body.appendChild(inAppWarningModal.element);
            inAppWarningModal.show();
        }
        else {
            this.setInAppHintLink = () => null;
        }
        if (isInitialized) {
            throw Error(`You can only new BrowserProvider() one time`);
        }
        isInitialized = true;
        this.hide = () => hide();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const globalEthereum = typeof window !== 'undefined' ? window.ethereum : undefined;
        // when dapp browser open dapp which use qubic-sdk
        // it will use window.ethereum as default provider
        if (globalEthereum && (globalEthereum === null || globalEthereum === void 0 ? void 0 : globalEthereum.isQubic)) {
            globalEthereum.hide = () => null;
            return globalEthereum;
        }
    }
}
exports.BrowserProvider = BrowserProvider;
exports.default = BrowserProvider;
