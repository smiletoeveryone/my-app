"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const is_url_1 = __importDefault(require("is-url"));
const css_1 = require("@emotion/css");
const Modal_1 = __importDefault(require("./Modal"));
const translation_1 = require("../translation");
const styles = {
    container: {
        marginTop: '24px',
    },
    link: {
        color: '#568ddc',
        wordBreak: 'break-all',
        margin: '0',
        textAlign: 'center',
        lineHeight: '1.7',
    },
};
const isIOS = /iPad|iPhone|iPod/.test(navigator.platform) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
function createInAppWarningModal(inAppHintLink) {
    const container = document.createElement('div');
    container.className = css_1.css(styles.container);
    const link = window.location.href;
    const messageP = document.createElement('p');
    messageP.className = css_1.css(styles.link);
    messageP.innerHTML = link;
    container.appendChild(messageP);
    function setInAppHintLink(value) {
        if (value && !is_url_1.default(value)) {
            throw Error('inAppHintLink should be a url');
        }
        messageP.innerHTML = value;
    }
    if (inAppHintLink) {
        setInAppHintLink(inAppHintLink);
    }
    const modal = new Modal_1.default({
        children: container,
        description: isIOS ? translation_1.t('in-app-hint-ios') : translation_1.t('in-app-hint-android'),
        confirmText: translation_1.t('copy-link'),
        onConfirm: () => {
            navigator.clipboard.writeText(link).catch(() => {
                // eslint-disable-next-line no-alert
                window.alert(isIOS ? translation_1.t('copy-failed-ios') : translation_1.t('copy-failed-android'));
            });
        },
    });
    return {
        modal,
        setInAppHintLink,
    };
}
exports.default = createInAppWarningModal;
