"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const json_rpc_engine_1 = require("json-rpc-engine");
const core_1 = require("@qubic-js/core");
const css_1 = require("@emotion/css");
const BrowserBridge_1 = __importDefault(require("../utils/BrowserBridge"));
const styles = {
    container: {
        display: 'none',
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        zIndex: 99999,
        backgroundColor: '#00000066',
        borderWidth: 0,
    },
};
class IFrame {
    constructor(walletUrl, apiConfig) {
        this.isReady = false;
        this.isIframeAppended = false;
        this.getUrl = () => {
            return core_1.urlWithApiConfig(this.walletUrl, this.apiConfig);
        };
        this.show = () => {
            if (!this.isIframeAppended) {
                document.body.appendChild(this.element);
                this.isIframeAppended = true;
            }
            setTimeout(() => {
                this.element.style.display = 'block';
            }, 500); // make the transition smooth
        };
        this.hide = () => {
            this.element.style.display = 'none';
            this.bridge.postMessage({ action: 'hideIframeDone' }, '*');
        };
        this.waitUntilReady = (keepHide = false) => {
            const { bridge, isReady, show } = this;
            return new Promise(resolve => {
                if (isReady) {
                    if (!keepHide) {
                        show();
                    }
                    resolve();
                    return;
                }
                bridge.once(core_1.BridgeEvent.ready, resolve);
                show();
            });
        };
        this.createPrepareBridgeMiddleware = () => json_rpc_engine_1.createAsyncMiddleware((req, res, next) => __awaiter(this, void 0, void 0, function* () {
            if (core_1.WALLET_HANDLE_METHODS.includes(req.method)) {
                yield this.waitUntilReady(core_1.KEEP_HIDE_WALLET_HANDLE_METHODS.includes(req.method));
            }
            next();
        }));
        this.walletUrl = walletUrl;
        this.apiConfig = apiConfig;
        const iframe = document.createElement('iframe');
        iframe.width = '100%';
        iframe.height = '100%';
        iframe.frameBorder = '0';
        iframe.className = css_1.css(styles.container);
        iframe.src = this.getUrl();
        this.element = iframe;
        this.bridge = new BrowserBridge_1.default({
            postMessage: (message, targetOrigin, transfer) => {
                var _a;
                if (!this.element.contentWindow) {
                    throw Error('content window issue');
                }
                (_a = this.element.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, targetOrigin, transfer);
            },
            listenMessageFrom: window,
        });
        this.bridge.on(core_1.BridgeEvent.ready, () => {
            this.isReady = true;
        });
        this.bridge.on(core_1.BridgeEvent.hide, () => {
            this.hide();
        });
    }
}
exports.default = IFrame;
